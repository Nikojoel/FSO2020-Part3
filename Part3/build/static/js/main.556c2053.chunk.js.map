{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","components/Notification.js","services/API.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","filtered","persons","filter","char","name","toUpperCase","includes","filterValue","value","onChange","handleFilterInput","map","person","i","key","number","PersonForm","newName","handleNameInput","newNumber","handleNumberInput","type","onClick","e","preventDefault","undefined","checkName","addName","window","confirm","updateName","id","Persons","remove","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","put","delete","App","useState","setPersons","setNewName","setNewNumber","setNewFilterValue","error","setError","styleClass","setClass","getPersons","APIService","useEffect","event","target","concat","setTimeout","catch","console","log","checkable","find","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.556c2053.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Filter = (props) => {\r\n    const filtered = props.persons.filter(char => char.name.toUpperCase().includes(props.filterValue.toUpperCase(), 0))\r\n    return (\r\n        <div>\r\n            <div>\r\n                filter names: <input value={props.filterValue} onChange={props.handleFilterInput}/>\r\n            </div>\r\n            {props.filterValue !== \"\" &&\r\n            filtered.map((person, i) =>\r\n                    <p key={i}>{person.name} {person.number}</p>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\nexport default Filter","import React from \"react\";\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Add new number</h2>\r\n            <form>\r\n                <div>\r\n                    name: <input value={props.newName} onChange={props.handleNameInput}/>\r\n                </div>\r\n                <div>\r\n                    number: <input value={props.newNumber} onChange={props.handleNumberInput}/>\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\" onClick={(e)=> {\r\n                        e.preventDefault()\r\n                        if (props.checkName(props.newName) === undefined) {\r\n                            props.addName()\r\n                        } else if (window.confirm(`${props.newName} is already on the phone book, replace the old number with a new one?`)) {\r\n                            props.updateName(props.checkName(props.newName).id)\r\n                        }\r\n                    }}>Add\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from \"react\";\r\n\r\nconst Persons = (props) => {\r\n    return (\r\n        <div>\r\n            <h2>Numbers</h2>\r\n            {props.persons.map((person, i) =>\r\n                    <p key={i}>{person.name} {person.number}<button onClick={() => {\r\n                        if (window.confirm(`Delete ${person.name} ?`)) {\r\n                            props.remove(person.id)\r\n                        }\r\n                    }}>Delete</button></p>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import React from \"react\";\r\n\r\nconst Notification = (props) => {\r\n    if (props.message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    update: update,\r\n    remove: remove,\r\n}","import React, {useEffect, useState} from 'react'\r\nimport Filter from \"./components/Filter\"\r\nimport PersonForm from \"./components/PersonForm\"\r\nimport Persons from \"./components/Persons\"\r\nimport Notification from \"./components/Notification\";\r\nimport APIService from \"./services/API\"\r\n\r\nconst App = () => {\r\n    const [persons, setPersons] = useState([])\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [filterValue, setNewFilterValue] = useState('')\r\n    const [error, setError] = useState(null)\r\n    const [styleClass, setClass] = useState('')\r\n\r\n    const getPersons = () => {\r\n        APIService.getAll().then(response => {\r\n            setPersons(response)\r\n        })\r\n    }\r\n    useEffect(getPersons, [])\r\n\r\n    const addName = () => {\r\n        const data = {name: newName, number: newNumber}\r\n            APIService.create(data).then(response => {\r\n                setPersons(persons.concat(response))\r\n                setNewName(\"\")\r\n                setNewNumber(\"\")\r\n                setClass(\"success\")\r\n                setError(`Added ${newName}`)\r\n                setTimeout(() => {\r\n                    setError(null)\r\n                }, 5000)\r\n        }).catch(e => {\r\n            console.log(e)\r\n            setClass(\"error\")\r\n            setError(e.response.data.error)\r\n                setTimeout(() => {\r\n                    setError(null)\r\n                }, 5000)\r\n            })\r\n    }\r\n\r\n    const updateName = (id) => {\r\n        const data = {name: newName, number: newNumber}\r\n            APIService.update(id, data).then(() => {\r\n                getPersons()\r\n                setNewName(\"\")\r\n                setNewNumber(\"\")\r\n                setClass(\"success\")\r\n                setError(`Updated ${newName}`)\r\n                setTimeout(() => {\r\n                    setError(null)\r\n                }, 5000)\r\n            }).catch(e => {\r\n                console.log(e)\r\n                setClass(\"error\")\r\n                setError(`${newName} was already removed from the server`)\r\n                setTimeout(() => {\r\n                    setError(null)\r\n                }, 5000)\r\n            })\r\n    }\r\n\r\n    const removeName = (id) => {\r\n        APIService.remove(id).then(getPersons)\r\n    }\r\n\r\n    const handleNameInput = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumberInput = (event) => {\r\n        setNewNumber(event.target.value)\r\n    }\r\n\r\n    const handleFilterInput = (event) => {\r\n        setNewFilterValue(event.target.value)\r\n    }\r\n\r\n    const checkName = (checkable) => {\r\n        return persons.find(name => checkable === name.name)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Notification message={error} className={styleClass}/>\r\n            <h2>Phonebook</h2>\r\n            <Filter persons={persons} filterValue={filterValue} handleFilterInput={handleFilterInput}/>\r\n            <PersonForm\r\n                handleNameInput={handleNameInput}\r\n                handleNumberInput={handleNumberInput}\r\n                newName={newName}\r\n                newNumber={newNumber}\r\n                addName={addName}\r\n                checkName={checkName}\r\n                updateName={updateName}\r\n            />\r\n            <Persons persons={persons} remove={removeName}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}